export LESS=-R
export PATH=~/WORKSPACE/20230825_fix_axis_bug_get_all_commits/jorek_merge/util/:$PATH

#ulimit -s unlimited
#ulimit -m unlimited

## Compile commands
# ./util/config.sh model=710 n_tor=1 n_period=1 n_plane=1 && make clean && make cleanall && make -j 8 && mv jorek_model710 jorek_model710_ntor1
# ./util/config.sh model=710 n_tor=5 n_period=1 n_plane=8 && make clean && make cleanall && make -j 8 && make -j 8 jorek2vtk jorek2_postproc jorek2_poincare q_fmhd

alias rm="rm -i"
alias lsr="ls -lrt"
alias gv="gv -antialias"
alias myquota="/usr/lpp/mmfs/bin/mmlsquota --block-size auto"
alias gitResetPushedCommit='git reset --soft HEAD~1'
alias sqcdjobid='source ~/scripts/slurm_dir.sh '
alias plot_live_data='plot_live_data.sh'
alias tmux_attach_t='tmux attach -t '
alias dsgetmykeys='ds get mykeys/my_key.pub mykeys/my_key mykeys/my_key-cert.pub'

# alias mysq="squeue -u $USER"
# alias sqnow='sacct --starttime 2023-08-09 --format=User,JobID,Jobname%30,state,start,end,elapsed,nnodes,WorkDir%180 | grep "$USER " | grep "RUNNING\|PENDING"'
alias sqdir='scontrol show job | grep "WorkDir=$WORKDIR"'
alias mysq="squeue -o '%.29j %.10i %.8q %.8M %.3D %.3L %.1T %.17r %.8u' -u $USER"
alias sqhist='sacct --starttime 2023-08-09 --format=User,JobID,Jobname%30,state,start,end,elapsed,nnodes,WorkDir%180 | grep "$USER "'
alias sqnow='sacct --starttime 2023-08-09 --format=User,JobID,Jobname%20,state,WorkDir%180 | grep "$USER " | grep "RUNNING\|PENDING"'
alias watchsq='watch -n 1 squeue -u $USER'
alias sqmemory='sacct -a --format=user%10,jobname%30,node%10,start%20,end%20,elapsed%10,MaxRSS -j'

alias jorekShowSteps="egrep -i 'info\(2|time iterat|time step :|min,max deltas' logfile"
#alias bpeek="egrep -i 'info\(2|time iterat|time step :|min,max deltas' logfile"
alias tailf='tail logfile -f | grep -e "time step :" -e "Elapsed time ITERATION" -e "min,max deltas  =" -e "Elapsed time in construct " -e "Number of iterations" -e "After step " -e "Elapsed time updating preconditioner "'
alias llh='du -h --max-depth=1 | sort -h'

alias cpXfiles='find ./ -maxdepth 1 -type f -perm /a+x | xargs cp -t ' # followed by target path
alias renameH5_to_short='rename jorek0 jorek jorek0?????.h5'
alias renameH5_to_long='rename jorek jorek0 jorek?????.h5'
alias stopJorek='touch STOP_NOW'
alias outputJorek='touch OUTPUT_NOW'

alias reg_cases_ls='reg_tests/run_test.sh -l'
alias reg_case_comp_and_run='reg_tests/run_test.sh -j 8 '
alias reg_case_compile='reg_tests/run_test.sh -p -j 8 '
alias reg_case_run='reg_tests/run_test.sh -k -n '
alias reg_clean_all='reg_tests/cleanup.sh'

alias live_data='time2si && plot_live_data -noplot'

#alias time2si="time2si=$(grep "@times_y2si:" macroscopic_vars.dat | awk '{print $2}')"
alias jorek_post='./jorek2_postproc < ~/scripts/postproc_script.txt && sed -i '1s/^#//' postproc/exprs_averaged_s*.dat && sed -i '/^#/d' postproc/qprofile_s*.dat'
alias jorek_post2='sed -i '1s/^#//' ' # remove first # in first line in postproc/exprs_averaged_s*.dat 
alias jorek_post3='sed -i '/^#/d' ' # remove first line start with # in postproc/qprofile_s*.dat

alias cvt2vtkno0='convert2vtk.sh -no0 -j 8 jorek2vtk '
alias cvt2vtk='convert2vtk.sh -j 8 jorek2vtk '

cvt2vtk_itor() {
  local itor="$1"
  local input="$2"
  if [ -n "$3" ]; then
    local only="$3"
    echo "Only processing nsteps of: "$only
    convert2vtk.sh -i_tor "$itor" -only "$only" -j 8 jorek2vtk "$input"
  else
    convert2vtk.sh -i_tor "$itor" -j 8 jorek2vtk "$input"
  fi
}
cvt2vtk_iplane() {
  local ip="$1"
  local input="$2"
  if [ -n "$3" ]; then
    local only="$3"
    echo "Only processing nsteps of: "$only
    convert2vtk.sh -i_plane "$ip" -only "$only" -j 8 jorek2vtk "$input"
  else
    convert2vtk.sh -i_plane "$ip" -j 8 jorek2vtk "$input"
  fi
}

cvt2vtk_iplane_nsub() {
  local ip="$1"
  local nsub="$2"
  local input="$3"
  if [ -n "$4" ]; then
    local only="$4"
    echo "Only processing nsteps of: "$only
    convert2vtk.sh -i_plane "$ip" -nsub "$nsub" -only "$only" -j 8 jorek2vtk "$input"
  else
    convert2vtk.sh -i_plane "$ip" -nsub "$nsub" -j 8 jorek2vtk "$input"
  fi
}

cvt2vtkno0_iplane() {
  local ip="$1"
  local input="$2"
  if [ -n "$3" ]; then
    local only="$3"
    echo "Only processing nsteps of: "$only
    convert2vtk.sh -i_plane "$ip" -only "$only" -no0 -j 8 jorek2vtk "$input"
  else
    convert2vtk.sh -i_plane "$ip" -no0 -j 8 jorek2vtk "$input"
  fi
}
cvt2vtk_itor_iplane() {
  local itor="$1"
  local ip="$2"
  local input="$3"
  if [ -n "$4" ]; then
    local only="$4"
    echo "Only processing nsteps of: "$only
    convert2vtk.sh -i_tor "$itor" -i_plane "$ip" -only "$only" -j 8 jorek2vtk "$input"
  else
    convert2vtk.sh -i_tor "$itor" -i_plane "$ip" -j 8 jorek2vtk "$input"
  fi
}

# Define a function to echo array elements
print_array() {
    local array=("$@")  # Receive the array as arguments
    for element in "${array[@]}"; do
        echo "$element"
    done
}

jorek_post_time() {
  ./jorek2_postproc < ~/scripts/postproc_script_time_series.txt 
  sed -i '1s/^#//' postproc/exprs_at*.dat
}

jorek_post_count() {
    local directory="$1"
    
    # Check if directory is provided, otherwise use current directory
    if [ -z "$directory" ]; then
		directory="postproc/"
    fi
    # Count files with the specified prefix
    local prefix="fluxsurfaces_s"
    local count=$(find "$directory" -type f -name "${prefix}*" | wc -l)
	echo "Find $count ${prefix}* files."
    local prefix="qprofile_s"
    local count=$(find "$directory" -type f -name "${prefix}*" | wc -l)
	echo "Find $count ${prefix}* files."
    local prefix="exprs_averaged_s"
    local count=$(find "$directory" -type f -name "${prefix}*" | wc -l)
	echo "Find $count ${prefix}* files."
    local prefix="exprs_midplane_s"
    local count=$(find "$directory" -type f -name "${prefix}*" | wc -l)
	echo "Find $count ${prefix}* files."
}

jorek_post_all() {
  live_data
  live_data -q ti
  unset id ids sorted_ids unique_ids ids_exist file_id
  # Check if an ID was provided as a parameter
  if [ -n "$1" ]; then
    #id="$1"  # Use the provided ID
    # for id in "$@"; do
    #   echo "post_porcessing: $id"
    #   sed -i 's/\b[0-9]\{5\}\b/'"$id"'/g' ~/scripts/postproc_script.txt
    #   ./jorek2_postproc < ~/scripts/postproc_script.txt > postproc.log
    # done
    ids=("$@")
  else
    # Extract IDs and store them in an array
    ids=($(find ./ -maxdepth 1 -type f -name 'jorek*.h5' | grep -oE 'jorek[0-9]+\.h5' | sed 's/jorek\([0-9]\+\)\.h5/\1/'))
    # print_array "${ids[@]}"
    # ids_exist=($(find ./postproc/ -maxdepth 1 -type f -name 'exprs_averaged_s*.dat' | grep -oE 'exprs_averaged_s[0-9]+\.dat' | sed 's/exprs_averaged_s\([0-9]\+\)\.dat/\1/'))
    ids_exist=($(find ./postproc/ -maxdepth 1 -type f -name 'exprs_midplane_s*.dat' | grep -oE '_s[0-9]+\.dat' | sed 's/_s\([0-9]\+\)\.dat/\1/'))
#    ids_exist=($(find ./postproc/ -maxdepth 1 -type f -name 'exprs_averaged_s*.dat' | grep -oE '_s[0-9]+\.dat' | sed 's/_s\([0-9]\+\)\.dat/\1/'))
#    ids_exist=($(find ./postproc/ -maxdepth 1 -type f -name 'fluxsurfaces_s*.dat' | grep -oE '_s[0-9]+\.dat' | sed 's/_s\([0-9]\+\)\.dat/\1/'))
#    ids_exist=($(find ./postproc/ -maxdepth 1 -type f -name 'qprofile_s*.dat' | grep -oE '_s[0-9]+\.dat' | sed 's/_s\([0-9]\+\)\.dat/\1/'))
  fi
  sorted_ids=($(printf "%s\n" "${ids[@]}" | sort -n))

  # Loop through the sorted IDs and exist IDs and add them to unique_ids if they are not already in it
  for id in "${sorted_ids[@]}"; do
    if [[ ! " ${unique_ids[@]} " =~ " $id " ]] && [[ ! " ${ids_exist[@]} " =~ " $id " ]]; then
      unique_ids+=("$id")
    fi
  done

  # Counter for active threads
  active_threads=0
  # Maximum number of threads in parallel
  max_threads=5  # Adjust based on your preference

  mkdir ~/scripts/tmp_postproc
  # Loop through the IDs and replace them in postproc_script.txt
  for id in "${unique_ids[@]}"; do
	# Check if the maximum number of threads is reached
    if [ "$active_threads" -ge "$max_threads" ]; then
		# Wait for one background process to finish
		wait
        active_threads=0
    fi

    echo "post_porcessing: $id" && \
    file_id=~/scripts/tmp_postproc/"postproc_script_$id.txt" && \
    cp ~/scripts/postproc_script.txt $file_id && \
    sed -i 's/\b[0-9]\{5\}\b/'"$id"'/g' $file_id && \
    ./jorek2_postproc < $file_id > postproc.log &

	((active_threads++))
  done

  wait

  sed -i '1s/^#//' postproc/exprs_averaged_s*.dat
  sed -i '1s/^#//' postproc/exprs_midplane_s*.dat
  sed -i '/^#/d' postproc/qprofile_s*.dat
  
  unset id ids sorted_ids unique_ids ids_exist file_id
}

jorek_poincare_all() {
  unset id ids sorted_ids unique_ids ids_exist input_file_name
  mkdir poincares

  while [[ $# -gt 0 ]]; do
      case "$1" in
          -fn)
              if [ -n "$2" ]; then
                  input_file_name="$2"
                  shift 2
              else
                  echo "Error: Missing argument for -fn flag (the input file)."
                  exit 1
              fi
              ;;
          *)
              # Capture other parameters in the 'ids' array
              ids+=("$1")
              shift
              ;;
      esac
  done

  # Check if an ID was provided as a parameter
  # if [ -n "$1" ]; then
  #   ids=("$@")
  # else
  if [ ${#ids[@]} -gt 0 ]; then
    echo "Ids is not empty: ${ids[@]}"
  else
    # Extract IDs and store them in an array
    ids=($(find ./ -maxdepth 1 -type f -name 'jorek*.h5' | grep -oE 'jorek[0-9]+\.h5' | sed 's/jorek\([0-9]\+\)\.h5/\1/'))
    ids_exist=($(find ./poincares/ -maxdepth 1 -type f -name 'poinc_R-Z_s*.dat' | grep -oE '_s[0-9]+\.dat' | sed 's/_s\([0-9]\+\)\.dat/\1/'))
  fi
  sorted_ids=($(printf "%s\n" "${ids[@]}" | sort -n))

  # Loop through the sorted IDs and exist IDs and add them to unique_ids if they are not already in it
  for id in "${sorted_ids[@]}"; do
    if [[ ! " ${unique_ids[@]} " =~ " $id " ]] && [[ ! " ${ids_exist[@]} " =~ " $id " ]]; then
      unique_ids+=("$id")
    fi
  done

  # Loop through the IDs
  for id in "${unique_ids[@]}"; do
    echo "poincare_porcessing file: jorek$id.h5"
    cp "jorek$id.h5" jorek_poincare.h5
    ./jorek2_poincare < $input_file_name > poincare.log
    echo "Finished, moving poinc_*.dat to poincares/"
    mv poinc_R-Z.dat "poincares/poinc_R-Z_s$id.dat"
    mv poinc_rho-theta.dat "poincares/poinc_rho-theta_s$id.dat"
    mv poincare.ps "poincares/poincare$id.ps"
  done

  unset id ids sorted_ids unique_ids ids_exist input_file_name
}

make_jorek() {
  unset pfix underscore ext origin_file new_file
  local usage="Usage: make_jorek [model(=7xx) ntor(=2*n_max+1) nperiod(=1, usually) nplane(>=4*n_max)]"
  local description="This function compiles executable files for specified model and parameters."
  local help_text="$usage\n$description"
  if [ $# -eq 0 ]; then
    echo -e "$help_text"
    echo "Example: make_jorek 710 5 1 8"
    return
  fi

  local para_model="$1"
  local para_ntor="$2"
  local para_nperiod="$3"
  local para_nplane="$4"
  pfix="jorek_model"
  underscore="_"
  ext="$underscore$para_ntor$underscore$para_nperiod$underscore$para_nplane"

  origin_file="$pfix$para_model"
  new_file="$pfix$para_model$ext"
   
  ./util/config.sh model="$para_model" n_tor="$para_ntor" n_period="$para_nperiod" n_plane="$para_nplane" && make cleanall && make -j 8
  make -j 8 jorek2vtk jorek2_postproc jorek2_poincare jorek2_four jorek2_target2vtk jorek2vtk_3d q_fmhd jorek2_fieldlines_vtk_newdiag q_fmhd_3D
  mv "$origin_file" "$new_file" && make install
  unset pfix underscore ext origin_file new_file
}

# alias sbatch_dep='sbatch --dependency=afterok:' # e.g., sbatch --dependency=afterok:<first_job_id> my_second_job.sh # rok means run ok (succes)
sbatch_dep_job() {
  local first_job_id="$1"
  local script_name="$2"
  sbatch --dependency=afterok:"$first_job_id" "$script_name"
}

sbatch_dep_job_any() {
  local first_job_id="$1"
  local script_name="$2"
  sbatch --dependency=afternotok:"$first_job_id" "$script_name"
}

function sbatch_chain() {
  if [ $# -lt 2 ]; then
    echo "Usage: qsubchain jobscript1 jobscript2 [...]"
    return
  fi
  
  thejobids=""
  depend=""
  while [ $# -gt 0 ]; do
    thejobid=`sbatch $depend $1 | sed -e 's/Submitted batch job *//'`
    thejobids="$thejobids $thejobid"
    depend="--dependency=afterok:$thejobid"
    shift
  done
  echo "JobIDs: $thejobids"
  unset depend thejobid thejobids
}


function sbatch_chain_any() {
  if [ $# -lt 2 ]; then
    echo "Usage: qsubchain jobscript1 jobscript2 [...]"
    return
  fi
  
  thejobids=""
  depend=""
  while [ $# -gt 0 ]; do
    thejobid=`sbatch $depend $1 | sed -e 's/Submitted batch job *//'`
    thejobids="$thejobids $thejobid"
    depend="--dependency=afternotok:$thejobid"
    shift
  done
  echo "JobIDs: $thejobids"
  unset depend thejobid thejobids
}

time2si() {
  time2si=$(grep "@times_y2si:" macroscopic_vars.dat | awk '{print $2}')
}

bpeek() {
  if [ -n "$1" ]; then
    filename="$1"
  else
    filename=logfile
  fi

  egrep --text -i 'info\(2|time iterat|time step :|min,max deltas' $filename
}

stopJorekAfterHours() {
    time="$1"
	echo "touch STOP_NOW" | at now + $time hours
}

stopJorekAfterMins() {
    time="$1"
	echo "touch STOP_NOW" | at now + $time minutes
}

n_MPI_from_n_tor() {
    local n_tor=$1
    # Iterate over k from 1 to 10
    for ((k = 1; k <= 10; k++)); do
	    # Perform the calculation
	    local n_MPI=$((k * (n_tor + 1) / 2))
        # Print the result
        echo "For k=$k, n_MPI = $n_MPI"
    done
}

n_plane_from_n_tor() {
    local n_tor=$1
    # Iterate over k from 2 to 10
    # At least 2*(n_tor-1)
    for ((k = 2; k <= 10; k++)); do
	    # Perform the calculation
	    local n_plane=$((k * (n_tor - 1)))
        # Print the result
        echo "For k=$k, n_plane = $n_plane"
    done
}

jorek_four_all() {
  live_data
  live_data -q ti
  unset id ids sorted_ids unique_ids ids_exist file_id input_file_name
  while [[ $# -gt 0 ]]; do
      case "$1" in
          -fn)
              if [ -n "$2" ]; then
                  input_file_name="$2"
                  shift 2
              else
                  echo "Error: Missing argument for -fn flag (the input file)."
                  exit 1
              fi
              ;;
          *)
              # Capture other parameters in the 'ids' array
              ids+=("$1")
              shift
              ;;
      esac
  done
  # Check if an ID was provided as a parameter
  if [ ${#ids[@]} -gt 0 ]; then
    echo "Ids is not empty: ${ids[@]}"
  else
    # Extract IDs and store them in an array
    ids=($(find ./ -maxdepth 1 -type f -name 'jorek*.h5' | grep -oE 'jorek[0-9]+\.h5' | sed 's/jorek\([0-9]\+\)\.h5/\1/'))
    # print_array "${ids[@]}"
	ids_exist=($(find ./four_results/ -maxdepth 1 -type f -name 'Uphi_n000_m000_step*' | grep -oE 'step[0-9]+' | sed 's/step//'))
  fi
  sorted_ids=($(printf "%s\n" "${ids[@]}" | sort -n))

  # Loop through the sorted IDs and exist IDs and add them to unique_ids if they are not already in it
  for id in "${sorted_ids[@]}"; do
    if [[ ! " ${unique_ids[@]} " =~ " $id " ]] && [[ ! " ${ids_exist[@]} " =~ " $id " ]]; then
      unique_ids+=("$id")
    fi
  done

  # Counter for active threads
  active_threads=0
  # Maximum number of threads in parallel
  max_threads=1  # Adjust based on your preference

  # Loop through the IDs and replace them in postproc_script.txt
  for id in "${unique_ids[@]}"; do
	# Check if the maximum number of threads is reached
    if [ "$active_threads" -ge "$max_threads" ]; then
		# Wait for one background process to finish
		wait
        active_threads=0
    fi

    echo "four_porcessing: $id" && \
    cp "jorek$id.h5" jorek_four.h5
	./jorek2_four < ./${input_file_name} > four_logfile

	((active_threads++))
  done

  wait

  unset id ids sorted_ids unique_ids ids_exist file_id
}

# useful commands
# plot_q_versus_time.py -xm $time2si -xl "time [ms]" -ylim 0.0707 0.5 -cs 1.0 1.01 #-clim 0.928 1.300 -cs 0.99 1.0
# plot_f_versus_time.py -xm $time2si -fn exprs_midplane -yc 7 -xl "time [ms]" -clim -0.0000001 0.0000001 # -ylim 0.0707 0.5 -cs 1.0 1.01 #-clim 0.928 1.300 -cs 0.99 1.0
# plot_VxB_tor.py -np 32 -ns 43200 vtk_no0_iplane # -xylim 1.20 2.00 -0.20 0.30
# plot_multiple_files.py energies.dat -sk 1 -ys log -xm $time2si -xl "time[ms]" -yl "normalized energies" -ti "normalized energies vs time"
# plot_mn_mode_structures.py four_results -va rho T_e -nl 1 2 -ml 1 2 3 23 -st 02000 04000 -tm $time2si #-me al -ex True -er 0.3
# plot_fft_1D_time_series.py four_results/1D_U_radial_n001_m002_vs_time_at_rhop_eq_0.30.dat -sk 1 -yc 2
# for i in {1..32}; do cvt2vtkno0_iplane $i input 40000; done
# rsync -aAXv 20230825_fix_axis_bug_get_all_commits --exclude={"*.vtk"} toki02jump:/u/hazh/WORKSPACE/MarconiSync/  #Ref: https://tecadmin.net/backup-linux-system/
# git checkout -b bugfix/ffprime_integration
# git push -u origin bugfix/ffprime_integration
